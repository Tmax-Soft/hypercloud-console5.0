'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactVirtualized = require('react-virtualized');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Checkbox = function Checkbox(_ref) {
  var onChange = _ref.onChange,
      checked = _ref.checked,
      label = _ref.label,
      style = _ref.style;
  return _react2.default.createElement(
    'div',
    { style: Object.assign({}, style, { textAlign: 'left' }) },
    _react2.default.createElement(
      'label',
      null,
      _react2.default.createElement('input', {
        type: 'checkbox',
        value: label,
        onChange: onChange,
        checked: checked || false
      }),
      label
    )
  );
};

var Checkboxes = function (_Component) {
  _inherits(Checkboxes, _Component);

  function Checkboxes() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, Checkboxes);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Checkboxes.__proto__ || Object.getPrototypeOf(Checkboxes)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (event) {
      var _onChange;

      var _this$props = _this.props,
          labelKey = _this$props.labelKey,
          onChange = _this$props.onChange;

      onChange((_onChange = {}, _defineProperty(_onChange, labelKey, event.target.value), _defineProperty(_onChange, 'checked', event.target.checked), _onChange));
    }, _this.handleSelectAllChange = function (event) {
      var onSelectAllChange = _this.props.onSelectAllChange;

      onSelectAllChange(event.target.checked);
    }, _this.checkboxRenderer = function (_ref3) {
      var index = _ref3.index,
          style = _ref3.style;
      var _this$props2 = _this.props,
          items = _this$props2.items,
          filtered = _this$props2.filtered,
          labelKey = _this$props2.labelKey;


      if (index === 0) {
        var label = filtered ? '(Select all search results)' : '(Select all)';
        var checked = items.filter(function (i) {
          return i.checked;
        }).length === items.length;
        return _react2.default.createElement(Checkbox, {
          style: style,
          key: '#ALL#',
          onChange: _this.handleSelectAllChange,
          label: label,
          checked: checked
        });
      }
      var item = items[index - 1];
      return _react2.default.createElement(Checkbox, {
        style: style,
        key: item[labelKey],
        onChange: _this.handleChange,
        label: item[labelKey],
        checked: item.checked
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Checkboxes, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps() {
      this.list.forceUpdateGrid();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          items = _props.items,
          rowHeight = _props.rowHeight,
          height = _props.height,
          width = _props.width;

      var rowCount = items.length + 1;
      return _react2.default.createElement(_reactVirtualized.List, {
        height: height,
        width: width,
        ref: function ref(_ref4) {
          _this2.list = _ref4;
        },
        rowCount: rowCount,
        rowHeight: rowHeight,
        rowRenderer: this.checkboxRenderer
      });
    }
  }]);

  return Checkboxes;
}(_react.Component);

exports.default = Checkboxes;