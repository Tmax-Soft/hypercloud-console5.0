'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactVirtualized = require('react-virtualized');

var _Checkboxes = require('./Checkboxes');

var _Checkboxes2 = _interopRequireDefault(_Checkboxes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function getDistinctFast(items, key) {
  var unique = {};
  var distinct = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var opt = _step.value;

      if (typeof unique[opt[key]] === 'undefined') {
        distinct.push(opt);
      }
      unique[opt[key]] = 0;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return distinct;
}

// Fast function to update items
// Use the fact that both arrays are sorted and have no duplicates
// and that all elements of the second array are present in the first array
function updateItems(base, items, labelKey) {
  var index = 0;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = items[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var it = _step2.value;

      while (base[index][labelKey] !== it[labelKey]) {
        index += 1;
      }
      base[index].checked = it.checked;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return base;
}

var FilterBar = function FilterBar(_ref) {
  var value = _ref.value,
      _onChange = _ref.onChange,
      height = _ref.height,
      width = _ref.width;
  return _react2.default.createElement(
    'div',
    { style: { height: height } },
    _react2.default.createElement('input', {
      style: { width: width },
      type: 'text',
      id: 'filter',
      placeholder: 'Filter boxes',
      value: value,
      onChange: function onChange(event) {
        return _onChange(event.target.value);
      }
    })
  );
};

var Footer = function Footer(_ref2) {
  var width = _ref2.width,
      height = _ref2.height,
      hasOkButton = _ref2.hasOkButton,
      hasCancelButton = _ref2.hasCancelButton,
      onOk = _ref2.onOk,
      onCancel = _ref2.onCancel;
  return _react2.default.createElement(
    'div',
    { style: { display: 'flex', width: width, height: height } },
    hasOkButton && _react2.default.createElement('input', { type: 'button', value: 'Ok', onClick: onOk }),
    hasCancelButton && _react2.default.createElement('input', { type: 'button', value: 'Cancel', onClick: onCancel })
  );
};

var VirtualizedCheckbox = function (_Component) {
  _inherits(VirtualizedCheckbox, _Component);

  function VirtualizedCheckbox(props) {
    _classCallCheck(this, VirtualizedCheckbox);

    var _this = _possibleConstructorReturn(this, (VirtualizedCheckbox.__proto__ || Object.getPrototypeOf(VirtualizedCheckbox)).call(this, props));

    _initialiseProps.call(_this);

    var propsItems = props.items,
        labelKey = props.labelKey,
        textFilter = props.textFilter;


    var objectItems = typeof propsItems[0] === 'string' ? propsItems.map(function (item) {
      return _defineProperty({}, labelKey, item);
    }) : propsItems;
    var items = getDistinctFast(objectItems, labelKey);
    _this.state = {
      items: items,
      filter: textFilter
    };
    return _this;
  }

  _createClass(VirtualizedCheckbox, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          rowHeight = _props.rowHeight,
          hasOkButton = _props.hasOkButton,
          hasCancelButton = _props.hasCancelButton,
          hasFilterBox = _props.hasFilterBox,
          height = _props.height,
          propWidth = _props.width;

      var hasFooter = hasOkButton || hasCancelButton;
      var virtualScrollHeight = function virtualScrollHeight(h) {
        var i = 0;
        if (hasFooter) {
          i += 1;
        }
        if (hasFilterBox) {
          i += 1;
        }
        var actualHeight = height || h;
        return actualHeight - i * rowHeight;
      };
      return _react2.default.createElement(
        _reactVirtualized.AutoSizer,
        null,
        function (_ref4) {
          var width = _ref4.width,
              height = _ref4.height;
          return _react2.default.createElement(
            'div',
            null,
            hasFilterBox ? _react2.default.createElement(FilterBar, {
              value: _this2.state.filter,
              onChange: _this2.handleFilterChange,
              height: rowHeight,
              width: propWidth || width
            }) : null,
            _react2.default.createElement(_Checkboxes2.default, {
              height: virtualScrollHeight(height),
              width: propWidth || width,
              items: _this2.getFilteredItems(),
              labelKey: _this2.props.labelKey,
              filtered: !!_this2.state.filter,
              rowHeight: rowHeight,
              onChange: _this2.handleChange,
              onSelectAllChange: _this2.handleSelectAllChange
            }),
            hasFooter ? _react2.default.createElement(Footer, {
              onOk: _this2.handleOkClick,
              onCancel: _this2.handleCancelClick,
              width: propWidth || width,
              height: rowHeight,
              hasOkButton: hasOkButton,
              hasCancelButton: hasCancelButton
            }) : null
          );
        }
      );
    }
  }]);

  return VirtualizedCheckbox;
}(_react.Component);

VirtualizedCheckbox.propTypes = {
  hasCancelButton: _propTypes2.default.bool,
  hasFilterBox: _propTypes2.default.bool,
  hasOkButton: _propTypes2.default.bool,
  height: _propTypes2.default.number,
  items: _propTypes2.default.array,
  labelKey: _propTypes2.default.string,
  onCancel: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  onOk: _propTypes2.default.func,
  rowHeight: _propTypes2.default.number,
  textFilter: _propTypes2.default.string
};
VirtualizedCheckbox.defaultProps = {
  hasOkButton: true,
  hasCancelButton: true,
  hasFilterBox: true,
  labelKey: 'label',
  onCancel: function onCancel() {
    return null;
  },
  onChange: function onChange() {
    return null;
  },
  onOk: function onOk() {
    return null;
  },
  items: [],
  rowHeight: 30,
  textFilter: ''
};

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.handleSelectAllChange = function (checked) {
    var items = _this3.getFilteredItems().map(function (it) {
      return Object.assign({}, it, { checked: checked });
    });
    _this3.setState(function (prevState) {
      return {
        items: updateItems(prevState.items, items, _this3.props.labelKey)
      };
    });
    if (_this3.props.onChange) {
      _this3.props.onChange(items);
    }
  };

  this.handleChange = function (eventTarget) {
    var index = _this3.state.items.findIndex(function (it) {
      return it[_this3.props.labelKey] === eventTarget[_this3.props.labelKey];
    });
    var items = [].concat(_toConsumableArray(_this3.state.items));
    items[index].checked = eventTarget.checked;
    _this3.setState(function (prevState) {
      return {
        items: items
      };
    });
    if (_this3.props.onChange) {
      _this3.props.onChange(items[index]);
    }
  };

  this.handleFilterChange = function (filter) {
    _this3.setState(function () {
      return {
        filter: filter
      };
    });
  };

  this.getFilteredItems = function () {
    var _state = _this3.state,
        items = _state.items,
        filter = _state.filter;

    return items.filter(function (it) {
      return it[_this3.props.labelKey] && it[_this3.props.labelKey].toLowerCase().startsWith(filter.toLowerCase());
    });
  };

  this.handleOkClick = function () {
    var _state2 = _this3.state,
        items = _state2.items,
        filter = _state2.filter;

    var checkedItems = items.filter(function (i) {
      return i.checked;
    });
    _this3.props.onOk(checkedItems, checkedItems.length === items.length, filter);
  };

  this.handleCancelClick = function () {
    return _this3.props.onCancel();
  };
};

exports.default = VirtualizedCheckbox;